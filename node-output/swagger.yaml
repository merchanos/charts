{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "Swagger Mecathor",
    "description" : "Mecathor Mobile Solutions Store Server based on the OpenAPI 3.0 specification. You can find more information about Swagger at [https://mecabotic.com/swagger/v1/mecathor](https://www.mecabotic.com/swagger/v1/mecathor).\nThis API supports multiple languages and regional formats and includes detailed logging for effective monitoring and security features such as rate limiting.\n### Rate Limiting\nThe API enforces rate limiting to ensure fair usage and prevent abuse. The rate limit is set to **1000 requests per hour**. Headers are included in responses to indicate the current rate limit status:\n- `X-RateLimit-Limit`: The maximum number of requests allowed per hour.\n- `X-RateLimit-Remaining`: The number of requests remaining in the current rate limit window.\n- `X-RateLimit-Reset`: The number of seconds until the rate limit is reset.\n",
    "termsOfService" : "http://mecabotic.com/terms-api-mecathor/",
    "contact" : {
      "email" : "apiteam@mecabotic.com"
    },
    "license" : {
      "name" : "GNU Affero General Public License v3.0",
      "url" : "https://www.gnu.org/licenses/agpl-3.0.en.html"
    },
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find more information about Swagger",
    "url" : "https://mecabotic.com/swagger/v1/mecathor"
  },
  "servers" : [ {
    "url" : "https://mecabotic.local:8086/api/v1",
    "description" : "Production server (uses live data)"
  }, {
    "url" : "http://mecabotic.local:8086/api/v1",
    "description" : "Development server (uses test data)"
  } ],
  "security" : [ {
    "BearerAuth" : [ ]
  }, {
    "ApiKeyAuth" : [ ]
  }, {
    "OAuth2" : [ "read", "write", "admin" ]
  } ],
  "tags" : [ {
    "name" : "configuration",
    "description" : "Configuration operations for Mecathor",
    "externalDocs" : {
      "description" : "Find more information for configuration",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/configuration"
    }
  }, {
    "name" : "telemetry",
    "description" : "Telemetry operations from Mecathor",
    "externalDocs" : {
      "description" : "Find more information for telemetry",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/telemetry"
    }
  }, {
    "name" : "modules",
    "description" : "Operations on modules connected to Mecathor",
    "externalDocs" : {
      "description" : "Find more information for modules",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/modules"
    }
  }, {
    "name" : "sensors",
    "description" : "Operations on sensors connected to Mecathor",
    "externalDocs" : {
      "description" : "Find more information for sensors",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/sensors"
    }
  }, {
    "name" : "events",
    "description" : "Operations on events and subscriptions in Mecathor",
    "externalDocs" : {
      "description" : "Find more information for events",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/events"
    }
  }, {
    "name" : "users",
    "description" : "User operations for user authentication and profile management",
    "externalDocs" : {
      "description" : "Find more information for users",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/users"
    }
  }, {
    "name" : "authentication",
    "description" : "User operations for authentication and profile management",
    "externalDocs" : {
      "description" : "Find more information for users",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/users"
    }
  }, {
    "name" : "deprecated",
    "description" : "Deprecated endpoints in Mecathor",
    "externalDocs" : {
      "description" : "Find more information for deprecated",
      "url" : "http://mecabotic.com/swagger/v1/mecathor/deprecated"
    }
  } ],
  "paths" : {
    "/configurations/wifi" : {
      "get" : {
        "tags" : [ "configuration" ],
        "summary" : "Get the current WiFi configuration",
        "responses" : {
          "200" : {
            "description" : "Current WiFi configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WiFiConfigurationResponse"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of WiFi configuration",
                    "value" : {
                      "data" : {
                        "ssid" : "MyHomeWiFi",
                        "mode" : 0,
                        "band" : "2.4GHz"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "configuration" ],
        "summary" : "Configure WiFi network",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WiFiConfigurationData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "WiFi configuration was successful.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful WiFi configuration",
                    "value" : {
                      "data" : {
                        "result" : "WIFI_CONFIGURATION_SUCCESSFUL"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "The client has sent too many requests in a given amount of time (\"rate limiting\").",
            "headers" : {
              "X-RateLimit-Limit" : {
                "description" : "The maximum number of requests that the client is permitted to make per time window.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 1000
                }
              },
              "X-RateLimit-Remaining" : {
                "description" : "The number of requests remaining in the current rate limit window.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 0
                }
              },
              "X-RateLimit-Reset" : {
                "description" : "The number of seconds left until the rate limit is reset.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 3600
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "rateLimitExceeded" : {
                    "summary" : "Rate limit exceeded",
                    "value" : {
                      "error" : {
                        "code" : 429,
                        "message" : "Too many requests",
                        "status" : "Too Many Requests"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/total-energy-consumption" : {
      "get" : {
        "tags" : [ "telemetry" ],
        "summary" : "Retrieve the total energy consumption of the device",
        "responses" : {
          "200" : {
            "description" : "Total energy consumption of the device",
            "headers" : {
              "X-RateLimit-Limit" : {
                "$ref" : "#/components/headers/X-RateLimit-Limit"
              },
              "X-RateLimit-Remaining" : {
                "$ref" : "#/components/headers/X-RateLimit-Remaining"
              },
              "X-RateLimit-Reset" : {
                "$ref" : "#/components/headers/X-RateLimit-Reset"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of total energy consumption",
                    "value" : {
                      "data" : {
                        "total_consumption" : 50.5
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/channel-energy-consumption" : {
      "get" : {
        "tags" : [ "telemetry" ],
        "summary" : "Retrieve the energy consumption for specific channels",
        "parameters" : [ {
          "name" : "channel_id",
          "in" : "query",
          "description" : "IDs de canales específicos (A1, A2, B1, B2, C1, C2, USB1). Se pueden consultar múltiples canales separados por comas.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "example" : "A1,B2,USB1"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Energy consumption for specified channels",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_2"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of channel energy consumption",
                    "value" : {
                      "data" : {
                        "channels" : [ {
                          "channel_id" : "A1",
                          "consumption" : 10.5
                        }, {
                          "channel_id" : "B2",
                          "consumption" : 5.0
                        }, {
                          "channel_id" : "USB1",
                          "consumption" : 2.3
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/telemetry/battery-level" : {
      "get" : {
        "tags" : [ "telemetry" ],
        "summary" : "Get the battery level and charging status",
        "responses" : {
          "200" : {
            "description" : "Current battery level and charging status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_3"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of battery level",
                    "value" : {
                      "data" : {
                        "level" : 85,
                        "charging" : true
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modules/types" : {
      "get" : {
        "tags" : [ "modules" ],
        "summary" : "Retrieve a list of available module types",
        "responses" : {
          "200" : {
            "description" : "List of available module types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_4"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of module types",
                    "value" : {
                      "data" : [ {
                        "moduleKey" : "GPS",
                        "websiteURL" : "https://mecabotic.com/modules/gps",
                        "description" : {
                          "es" : "Este modulo se encarga de la gestión de GPS",
                          "en" : "This module is responsible for GPS management"
                        },
                        "@type" : "https://mecabotic.com/modules"
                      }, {
                        "moduleKey" : "LoRa",
                        "websiteURL" : "https://mecabotic.com/modules/lora",
                        "description" : {
                          "es" : "Este modulo se encarga de la gestión de LoRa",
                          "en" : "This module is responsible for LoRa management"
                        },
                        "@type" : "https://mecabotic.com/modules"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modules/{module_type}" : {
      "get" : {
        "tags" : [ "modules" ],
        "summary" : "Retrieve details of specific modules connected to Mecathor",
        "parameters" : [ {
          "name" : "module_type",
          "in" : "path",
          "description" : "Type of Module (ej: 'module-nbiot', 'module-lorawan', 'module-scd40' )",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the module",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_5"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of module details",
                    "value" : {
                      "data" : {
                        "module_id" : "mecathor-gps-1",
                        "status" : "CONNECTED",
                        "data" : {
                          "co2_ppm" : 400,
                          "temperature" : 22.5,
                          "humidity" : 55,
                          "co2_accuracy" : "±(50 ppm + 5% of reading, Example: 400 ppm ±70 ppm)",
                          "temperature_range" : "-10 to 60 °C",
                          "temperature_range_unit" : "Celsius",
                          "humidity_range" : "0 - 95 %RH"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modules/lorawan/{frequency}" : {
      "get" : {
        "tags" : [ "modules" ],
        "summary" : "Retrieve details of LoRaWAN module connected to Mecathor",
        "parameters" : [ {
          "name" : "frequency",
          "in" : "path",
          "description" : "Frequency of the LoRaWAN module (e.g., 470MHz, 915MHz)",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the LoRaWAN module",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModuleLoraWanData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modules/zigbee" : {
      "get" : {
        "tags" : [ "modules" ],
        "summary" : "Retrieve details of Zigbee module connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Zigbee module",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModuleZigbeeData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/modules/nbiot/{band}" : {
      "get" : {
        "tags" : [ "modules" ],
        "summary" : "Retrieve details of NB-IoT module connected to Mecathor",
        "parameters" : [ {
          "name" : "band",
          "in" : "path",
          "description" : "Operating band of the NB-IoT module (e.g., B20, B28)",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the NB-IoT module",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ModuleNbiotData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/types" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve a list of available sensor types",
        "responses" : {
          "200" : {
            "description" : "List of available sensor types",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_6"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of sensor types",
                    "value" : {
                      "data" : [ {
                        "moduleKey" : "PIR",
                        "websiteURL" : "https://mecabotic.com/sensors/pir",
                        "description" : {
                          "es" : "Este sensor se encarga de detectar movimiento",
                          "en" : "This sensor detects motion"
                        },
                        "@type" : "https://mecabotic.com/sensors"
                      }, {
                        "moduleKey" : "UHF-RFID",
                        "websiteURL" : "https://mecabotic.com/sensors/uhf-rfid",
                        "description" : {
                          "es" : "Este sensor se encarga de la gestión de UHF-RFID",
                          "en" : "This sensor is responsible for UHF-RFID management"
                        },
                        "@type" : "https://mecabotic.com/sensors"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/{sensor_type}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific sensors connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_type",
          "in" : "path",
          "description" : "Type of sensor (ej: 'sensor-pir', 'sensor-uhf-rfid', 'sensor-gps-lite', 'sensor-magnetic', 'sensor-dlight', 'sensor-photo-resistance', 'sensor-relay-1channel')",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_7"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of sensor details",
                    "value" : {
                      "data" : {
                        "sensor_id" : "mecathor-pir-1",
                        "status" : "ACTIVE",
                        "data" : {
                          "motion_detected" : true,
                          "detection_distance" : {
                            "value" : 500,
                            "unit" : "centimeters"
                          },
                          "sensing_range" : 100,
                          "latency_time" : 2,
                          "quiescent_current" : 60,
                          "operating_temperature" : "-20 - 80 °C"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/pir/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific PIR sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the PIR sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the PIR sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorPirData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/relay/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific 1-Channel Relay sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the 1-Channel Relay sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the 1-Channel Relay sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorRelay1ChannelData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/relay/{sensor_id}/state" : {
      "put" : {
        "tags" : [ "sensors" ],
        "summary" : "Configure the state of a relay sensor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the relay sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/sensor_id_state_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Relay state successfully configured",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_8"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful configuration of relay state",
                    "value" : {
                      "data" : {
                        "message" : "RELAY_STATE_SUCCESSFULLY_CONFIGURED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/uhf-rfid/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific RFID UHF sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the RFID UHF sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the RFID UHF sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorUhfRfidData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/uhf-rfid/version" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve the hardware and software version of the UHF-RFID module",
        "responses" : {
          "200" : {
            "description" : "Version information of the UHF-RFID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_9"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of UHF-RFID version",
                    "value" : {
                      "data" : {
                        "hardware_version" : "V1.00",
                        "software_version" : "V1.00",
                        "manufacturer" : "ManufacturerName"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/uhf-rfid/polling" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Perform a polling operation on the UHF-RFID module",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Type of polling (single/multiple)",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "single", "multiple" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Polling results of the UHF-RFID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_10"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful UHF-RFID polling",
                    "value" : {
                      "data" : {
                        "epc" : "30 75 1F EB 70 5C 59 04",
                        "rssi" : -70,
                        "pc" : "3000",
                        "crc" : "1234"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/relay-2channel" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of 2-Channel Relay sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the 2-Channel Relay sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorRelay2ChannelData"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/relay-2channel/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific 2-Channel SPST Relay sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the 2-Channel SPST Relay sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the 2-Channel SPST Relay sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorRelay2ChannelData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/microphone-lm393" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Microphone LM393 sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Microphone LM393 sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorMicrophoneLm393Data"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/microphone-lm393/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Microphone LM393 sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Microphone LM393 sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Microphone LM393 sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorMicrophoneLm393Data"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/passive-buzzer" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Passive Buzzer sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Passive Buzzer sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorPassiveBuzzerData"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/passive-buzzer/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Passive Buzzer sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Passive Buzzer sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Passive Buzzer sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorPassiveBuzzerData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/crypto-authentication" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Crypto Authentication sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Crypto Authentication sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorCryptoAuthenticationData"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/crypto-authentication/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Crypto Authentication sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Crypto Authentication sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Crypto Authentication sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorCryptoAuthenticationData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/voltmeter-ads1115" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Voltmeter ADS1115 sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Voltmeter ADS1115 sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorVoltmeterAds1115Data"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/voltmeter-ads1115/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Voltmeter ADS1115 sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Voltmeter ADS1115 sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Voltmeter ADS1115 sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorVoltmeterAds1115Data"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/ammeter-ads1115" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Ammeter ADS1115 sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Ammeter ADS1115 sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorAmmeterAds1115Data"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/ammeter-ads1115/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Ammeter ADS1115 sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Ammeter ADS1115 sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Ammeter ADS1115 sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorAmmeterAds1115Data"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/isolated-rs485" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Isolated RS485 sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Isolated RS485 sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorIsolatedRs485Data"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/isolated-rs485/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific RS485 Unit sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the RS485 Unit sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the RS485 Unit sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorIsolatedRs485Data"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/canbus" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of CANBus sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the CANBus sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorCanBusData"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/canbus/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific CANBus CA-IS3050G sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the CANBus CA-IS3050G sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the CANBus CA-IS3050G sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorCanBusData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/dual-button" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Dual Button sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Dual Button sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorDualButtonData"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/dual-button/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Mini Dual Button sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Mini Dual Button sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Mini Dual Button sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorDualButtonData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/mini-button" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of Mini Button sensor connected to Mecathor",
        "responses" : {
          "200" : {
            "description" : "Details of the Mini Button sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorMiniButtonData"
                }
              }
            }
          }
        }
      }
    },
    "/sensors/mini-button/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Mini Button sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Mini Button sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Mini Button sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorMiniButtonData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/photoresistance/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific PhotoResistence sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the PhotoResistence sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the PhotoResistence sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorPhotoResistanceData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/dlight/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Ambient Light sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Ambient Light sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Ambient Light sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorDlightData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/magnetic/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific Magnetic sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the Magnetic sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the Magnetic sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorMagneticData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sensors/gpslite/{sensor_id}" : {
      "get" : {
        "tags" : [ "sensors" ],
        "summary" : "Retrieve details of specific GPSLite sensor connected to Mecathor",
        "parameters" : [ {
          "name" : "sensor_id",
          "in" : "path",
          "description" : "ID of the GPSLite sensor",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details of the GPSLite sensor",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorGpsLiteData"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "List available events",
        "responses" : {
          "200" : {
            "description" : "List of available events",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_11"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of events",
                    "value" : {
                      "data" : [ {
                        "moduleKey" : "sensor_data_updated",
                        "websiteURL" : "https://mecabotic.com/events/sensor_data_updated",
                        "description" : {
                          "es" : "Evento disparado cuando los datos del sensor se actualizan.",
                          "en" : "Event triggered when sensor data is updated."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "device_status_changed",
                        "websiteURL" : "https://mecabotic.com/events/device_status_changed",
                        "description" : {
                          "es" : "Evento disparado cuando cambia el estado del dispositivo.",
                          "en" : "Event triggered when the device status changes."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "low_battery_warning",
                        "websiteURL" : "https://mecabotic.com/events/low_battery_warning",
                        "description" : {
                          "es" : "Evento disparado cuando la batería está baja.",
                          "en" : "Event triggered when the battery is low."
                        }
                      }, {
                        "moduleKey" : "pir_motion_detected",
                        "websiteURL" : "https://mecabotic.com/events/pir_motion_detected",
                        "description" : {
                          "es" : "Evento disparado cuando se detecta movimiento por el sensor PIR.",
                          "en" : "Event triggered when motion is detected by the PIR sensor."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "uhf_rfid_tag_detected",
                        "websiteURL" : "https://mecabotic.com/events/uhf_rfid_tag_detected",
                        "description" : {
                          "es" : "Evento disparado cuando se detecta una etiqueta UHF RFID.",
                          "en" : "Event triggered when a UHF RFID tag is detected."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "gps_position_updated",
                        "websiteURL" : "https://mecabotic.com/events/gps_position_updated",
                        "description" : {
                          "es" : "Evento disparado cuando se actualiza la posición GPS.",
                          "en" : "Event triggered when the GPS position is updated."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "magnetic_sensor_triggered",
                        "websiteURL" : "https://mecabotic.com/events/magnetic_sensor_triggered",
                        "description" : {
                          "es" : "Evento disparado cuando se activa el sensor magnético.",
                          "en" : "Event triggered when the magnetic sensor is triggered."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "light_sensor_value_changed",
                        "websiteURL" : "https://mecabotic.com/events/light_sensor_value_changed",
                        "description" : {
                          "es" : "Evento disparado cuando cambia el valor del sensor de luz.",
                          "en" : "Event triggered when the light sensor value changes."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "relay_state_changed",
                        "websiteURL" : "https://mecabotic.com/events/relay_state_changed",
                        "description" : {
                          "es" : "Evento disparado cuando cambia el estado del relay.",
                          "en" : "Event triggered when the relay state changes."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "co2_level_changed",
                        "websiteURL" : "https://mecabotic.com/events/co2_level_changed",
                        "description" : {
                          "es" : "Evento disparado cuando cambia el nivel de CO2.",
                          "en" : "Event triggered when the CO2 level changes."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "temperature_changed",
                        "websiteURL" : "https://mecabotic.com/events/temperature_changed",
                        "description" : {
                          "es" : "Evento disparado cuando cambia la temperatura.",
                          "en" : "Event triggered when the temperature changes."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "humidity_changed",
                        "websiteURL" : "https://mecabotic.com/events/humidity_changed",
                        "description" : {
                          "es" : "Evento disparado cuando cambia la humedad.",
                          "en" : "Event triggered when the humidity changes."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "dual_button_pressed",
                        "websiteURL" : "https://mecabotic.com/events/dual_button_pressed",
                        "description" : {
                          "es" : "Evento disparado cuando se presiona un botón del Dual Button.",
                          "en" : "Event triggered when a button on the Dual Button is pressed."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "moduleKey" : "mini_button_pressed",
                        "websiteURL" : "https://mecabotic.com/events/mini_button_pressed",
                        "description" : {
                          "es" : "Evento disparado cuando se presiona el Mini Button.",
                          "en" : "Event triggered when the Mini Button is pressed."
                        },
                        "@type" : "https://mecabotic.com/events"
                      }, {
                        "event" : "wifi_connected",
                        "description" : "Event triggered when the device connects to WiFi"
                      }, {
                        "event" : "wifi_disconnected",
                        "description" : "Event triggered when the device disconnects from WiFi"
                      }, {
                        "event" : "battery_charging",
                        "description" : "Event triggered when the battery starts charging"
                      }, {
                        "event" : "battery_full",
                        "description" : "Event triggered when the battery is fully charged"
                      }, {
                        "event" : "channel_connected",
                        "description" : "Event triggered when a channel is connected"
                      }, {
                        "event" : "channel_disconnected",
                        "description" : "Event triggered when a channel is disconnected"
                      }, {
                        "event" : "lorawan_data_received",
                        "description" : "Event triggered when data is received from a LoRaWAN device"
                      }, {
                        "event" : "lorawan_device_joined",
                        "description" : "Event triggered when a new LoRaWAN device joins the network"
                      }, {
                        "event" : "lorawan_device_left",
                        "description" : "Event triggered when a LoRaWAN device leaves the network"
                      }, {
                        "event" : "zigbee_data_received",
                        "description" : "Event triggered when data is received from a Zigbee device"
                      }, {
                        "event" : "zigbee_device_joined",
                        "description" : "Event triggered when a new Zigbee device joins the network"
                      }, {
                        "event" : "zigbee_device_left",
                        "description" : "Event triggered when a Zigbee device leaves the network"
                      }, {
                        "event" : "nbiot_data_received",
                        "description" : "Event triggered when data is received from an NB-IoT device"
                      }, {
                        "event" : "nbiot_device_connected",
                        "description" : "Event triggered when an NB-IoT device connects to the network"
                      }, {
                        "event" : "nbiot_device_disconnected",
                        "description" : "Event triggered when an NB-IoT device disconnects from the network"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/notifications" : {
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Receive event notifications",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventNotification"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Event notification received successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_12"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/subscriptions" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "List all event subscriptions",
        "responses" : {
          "200" : {
            "description" : "A list of event subscriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_13"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of subscriptions",
                    "value" : {
                      "data" : [ {
                        "event" : "sensor_data_updated",
                        "callback_url" : "https://client.example.com/webhooks",
                        "secret" : "supersecretkey"
                      }, {
                        "event" : "device_status_changed",
                        "callback_url" : "https://client.example.com/webhooks",
                        "secret" : "anothersecretkey"
                      } ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "events" ],
        "summary" : "Subscribe to an event",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventSubscription"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Subscription created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_201"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful subscription",
                    "value" : {
                      "data" : {
                        "subscription_id" : "sub-12345"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "The client has sent too many requests in a given amount of time (\"rate limiting\").",
            "headers" : {
              "X-RateLimit-Limit" : {
                "description" : "The maximum number of requests that the client is permitted to make per time window.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 1000
                }
              },
              "X-RateLimit-Remaining" : {
                "description" : "The number of requests remaining in the current rate limit window.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 0
                }
              },
              "X-RateLimit-Reset" : {
                "description" : "The number of seconds left until the rate limit is reset.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 3600
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "rateLimitExceeded" : {
                    "summary" : "Rate limit exceeded",
                    "value" : {
                      "error" : {
                        "code" : 429,
                        "message" : "Too many requests",
                        "status" : "Too Many Requests"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/subscriptions/{subscription_id}" : {
      "delete" : {
        "tags" : [ "events" ],
        "summary" : "Unsubscribe from an event",
        "parameters" : [ {
          "name" : "subscription_id",
          "in" : "path",
          "description" : "The ID of the subscription to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Subscription deleted successfully"
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "429" : {
            "description" : "The client has sent too many requests in a given amount of time (\"rate limiting\").",
            "headers" : {
              "X-RateLimit-Limit" : {
                "description" : "The maximum number of requests that the client is permitted to make per time window.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 1000
                }
              },
              "X-RateLimit-Remaining" : {
                "description" : "The number of requests remaining in the current rate limit window.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 0
                }
              },
              "X-RateLimit-Reset" : {
                "description" : "The number of seconds left until the rate limit is reset.",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "example" : 3600
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "rateLimitExceeded" : {
                    "summary" : "Rate limit exceeded",
                    "value" : {
                      "error" : {
                        "code" : 429,
                        "message" : "Too many requests",
                        "status" : "Too Many Requests"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/display" : {
      "post" : {
        "tags" : [ "configuration" ],
        "summary" : "Send a message to the display",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/devices_display_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Display message sent successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_14"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful display message",
                    "value" : {
                      "data" : {
                        "result" : "DISPLAY_MESSAGE_SENT"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/power-button" : {
      "put" : {
        "tags" : [ "configuration" ],
        "summary" : "Configure the power button",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/devices_powerbutton_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Power button configured successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_15"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful power button configuration",
                    "value" : {
                      "data" : {
                        "result" : "POWER_BUTTON_CONFIGURED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/button1" : {
      "put" : {
        "tags" : [ "configuration" ],
        "summary" : "Configure Button 1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/devices_button1_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Button 1 configured successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_16"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful button 1 configuration",
                    "value" : {
                      "data" : {
                        "result" : "BUTTON1_CONFIGURED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/button2" : {
      "put" : {
        "tags" : [ "configuration" ],
        "summary" : "Configure Button 2",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/devices_button2_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Button 2 configured successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_17"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful button 2 configuration",
                    "value" : {
                      "data" : {
                        "result" : "BUTTON2_CONFIGURED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/devices/button3" : {
      "put" : {
        "tags" : [ "configuration" ],
        "summary" : "Configure Button 3",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/devices_button3_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Button 3 configured successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_18"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful button 3 configuration",
                    "value" : {
                      "data" : {
                        "result" : "BUTTON3_CONFIGURED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/login" : {
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Login and obtain JWT token",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/auth_login_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Login successful and token returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_19"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful login",
                    "value" : {
                      "data" : {
                        "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/register" : {
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Register a new user",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/auth_register_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "User registered successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_201_1"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful user registration",
                    "value" : {
                      "data" : {
                        "user" : {
                          "id" : "123456",
                          "username" : "john_doe",
                          "email" : "john_doe@example.com",
                          "full_name" : "John Doe",
                          "created_at" : "2023-01-01T12:00:00Z",
                          "updated_at" : "2023-01-10T12:00:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "409" : {
            "description" : "The request could not be completed due to a conflict with the current state of the target resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "conflictCurrentResourceState" : {
                    "summary" : "Example of a conflict response",
                    "value" : {
                      "error" : {
                        "code" : 409,
                        "message" : "Conflict with current resource state",
                        "status" : "Conflict"
                      }
                    }
                  },
                  "resourceExists" : {
                    "summary" : "Resource already exists",
                    "value" : {
                      "error" : {
                        "code" : 409,
                        "message" : "Resource already exists",
                        "status" : "Conflict"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/me" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get the authenticated user's information",
        "responses" : {
          "200" : {
            "description" : "User information retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful retrieval of user information",
                    "value" : {
                      "data" : {
                        "id" : "123456",
                        "username" : "john_doe",
                        "email" : "john_doe@example.com",
                        "full_name" : "John Doe",
                        "created_at" : "2023-01-01T12:00:00Z",
                        "updated_at" : "2023-01-10T12:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Update the authenticated user's information",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/auth_me_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "User information updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_20"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Successful update of user information",
                    "value" : {
                      "data" : {
                        "id" : "123456",
                        "username" : "john_doe",
                        "email" : "john_doe@example.com",
                        "full_name" : "John Doe",
                        "created_at" : "2023-01-01T12:00:00Z",
                        "updated_at" : "2023-01-15T12:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BearerAuth" : [ ]
        } ]
      }
    },
    "/oauth/authorize" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "Authorize an OAuth client",
        "parameters" : [ {
          "name" : "response_type",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "client_id",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "redirect_uri",
          "in" : "query",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scope",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "state",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Authorization form"
          },
          "302" : {
            "description" : "Redirect to client"
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Handle OAuth client authorization",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/oauth_authorize_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "302" : {
            "description" : "Redirect to client"
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth/token" : {
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Obtain an OAuth access token",
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/oauth_token_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Access token generated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_21"
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/old-endpoint" : {
      "get" : {
        "tags" : [ "deprecated" ],
        "summary" : "This endpoint is deprecated",
        "description" : "This endpoint is deprecated and will be removed in the next version. Use the new endpoint `/new-endpoint`.",
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_22"
                },
                "examples" : {
                  "example-1" : {
                    "summary" : "Deprecated endpoint response",
                    "value" : {
                      "message" : "This endpoint is deprecated and will be removed in the next version. Use the new endpoint `/new-endpoint`."
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request is malformed or contains invalid parameters.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "invalidParameter" : {
                    "summary" : "Invalid parameter",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Invalid parameter",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "username",
                          "description" : "Username must be at least 6 characters long"
                        } ]
                      }
                    }
                  },
                  "missingField" : {
                    "summary" : "Missing required field",
                    "value" : {
                      "error" : {
                        "code" : 400,
                        "message" : "Missing required field",
                        "status" : "Bad Request",
                        "details" : [ {
                          "field" : "password",
                          "description" : "Password is required"
                        } ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Authentication credentials are missing or incorrect.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "unauthorizedAccess" : {
                    "summary" : "Example of an unauthorized response",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Unauthorized access",
                        "status" : "Unauthorized"
                      }
                    }
                  },
                  "invalidToken" : {
                    "summary" : "Invalid token",
                    "value" : {
                      "error" : {
                        "code" : 401,
                        "message" : "Invalid token",
                        "status" : "Unauthorized"
                      }
                    }
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "The client does not have sufficient permission for the requested operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "forbiddenOperation" : {
                    "summary" : "Example of a forbidden response",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Forbidden operation",
                        "status" : "Forbidden"
                      }
                    }
                  },
                  "accessDenied" : {
                    "summary" : "Access denied",
                    "value" : {
                      "error" : {
                        "code" : 403,
                        "message" : "Access denied",
                        "status" : "Forbidden"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The specified resource does not exist.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "resourceNotFound" : {
                    "summary" : "Example of a not found response",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Resource not found",
                        "status" : "Not Found"
                      }
                    }
                  },
                  "endpointNotFound" : {
                    "summary" : "Endpoint not found",
                    "value" : {
                      "error" : {
                        "code" : 404,
                        "message" : "Endpoint not found",
                        "status" : "Not Found"
                      }
                    }
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "An unexpected internal server error occurred.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                },
                "examples" : {
                  "internalServerError" : {
                    "summary" : "Example of an internal server error response",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Internal server error",
                        "status" : "Internal Server Error"
                      }
                    }
                  },
                  "databaseError" : {
                    "summary" : "Database error",
                    "value" : {
                      "error" : {
                        "code" : 500,
                        "message" : "Database error",
                        "status" : "Internal Server Error"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    }
  },
  "components" : {
    "schemas" : {
      "EventInfo" : {
        "type" : "object",
        "properties" : {
          "moduleKey" : {
            "type" : "string",
            "description" : "The key of the module or sensor generating the event",
            "example" : "sensor_data_updated"
          },
          "websiteURL" : {
            "type" : "string",
            "description" : "URL with more information about the event",
            "example" : "https://mecabotic.com/mecathor/events/sensor_data_updated"
          },
          "description" : {
            "$ref" : "#/components/schemas/EventInfo_description"
          },
          "@type" : {
            "type" : "string",
            "description" : "Type of the event",
            "example" : "https://mecabotic.com/mecathor/events"
          }
        }
      },
      "EventSubscription" : {
        "required" : [ "callback_url", "event", "secret" ],
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "The event to subscribe to (example, \"sensor_data_updated\", \"device_status_changed\").",
            "example" : "sensor_data_updated"
          },
          "callback_url" : {
            "type" : "string",
            "description" : "The URL to send the event notifications to.",
            "example" : "https://mecabotic.com/client/webhooks"
          },
          "secret" : {
            "type" : "string",
            "description" : "A secret key for verifying the webhook signature.",
            "example" : "supersecretkey"
          }
        }
      },
      "EventNotification" : {
        "required" : [ "data", "event", "signature" ],
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "The name of the event.",
            "example" : "sensor_data_updated"
          },
          "data" : {
            "type" : "object",
            "description" : "The data associated with the event."
          },
          "signature" : {
            "type" : "string",
            "description" : "The HMAC signature of the event payload.",
            "example" : "5f4dcc3b5aa765d61d8327deb882cf99"
          }
        }
      },
      "WiFiEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "The WiFi event (e.g., \"wifi_connected\", \"wifi_disconnected\")",
            "example" : "wifi_connected"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the WiFi event",
            "example" : "Event triggered when the device connects to WiFi"
          }
        }
      },
      "BatteryEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "The battery event (e.g., \"battery_charging\", \"battery_full\", \"battery_low\")",
            "example" : "battery_charging"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the battery event",
            "example" : "Event triggered when the battery starts charging"
          }
        }
      },
      "TelemetryEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "The telemetry event (e.g., \"channel_connected\", \"channel_disconnected\")",
            "example" : "channel_connected"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the telemetry event",
            "example" : "Event triggered when a channel is connected"
          }
        }
      },
      "ModuleInfo" : {
        "type" : "object",
        "properties" : {
          "moduleKey" : {
            "type" : "string",
            "description" : "The key of the module",
            "example" : "LoraWan"
          },
          "websiteURL" : {
            "type" : "string",
            "description" : "URL of the module documentation",
            "example" : "https://mecabotic.com/modules/lorawan"
          },
          "description" : {
            "$ref" : "#/components/schemas/ModuleInfo_description"
          },
          "@type" : {
            "type" : "string",
            "description" : "Type of the module",
            "example" : "https://mecabotic.com/modules"
          }
        }
      },
      "ModuleLoraWanEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "LoRaWAN event (e.g., \"lorawan_data_received\", \"lorawan_device_joined\")",
            "example" : "lorawan_data_received"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the LoRaWAN event",
            "example" : "Event triggered when data is received from a LoRaWAN device"
          }
        }
      },
      "ModuleZigbeeEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Zigbee event (e.g., \"zigbee_data_received\", \"zigbee_device_joined\")",
            "example" : "zigbee_data_received"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the Zigbee event",
            "example" : "Event triggered when data is received from a Zigbee device"
          }
        }
      },
      "ModuleNbIotEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "NB-IoT event (e.g., \"nbiot_data_received\", \"nbiot_device_connected\")",
            "example" : "nbiot_data_received"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the NB-IoT event",
            "example" : "Event triggered when data is received from an NB-IoT device"
          }
        }
      },
      "ModuleScd40EventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Event related to SCD40 Module (e.g., \"co2_level_changed\", \"temperature_changed\", \"humidity_changed\")",
            "example" : "temperature_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the SCD40 Module event",
            "example" : "Event triggered when the temperature changes"
          }
        }
      },
      "SensorPirEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "PIR sensor event (e.g., \"pir_motion_detected\")",
            "example" : "pir_motion_detected"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the PIR sensor event",
            "example" : "Event triggered when motion is detected by the PIR sensor"
          }
        }
      },
      "SensorUhfRfidEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "UHF RFID sensor event (e.g., \"uhf_rfid_tag_detected\")",
            "example" : "uhf_rfid_tag_detected"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the UHF RFID sensor event",
            "example" : "Event triggered when a UHF RFID tag is detected"
          }
        }
      },
      "SensorGpsLiteEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "GPS sensor event (e.g., \"gps_position_updated\")",
            "example" : "gps_position_updated"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the GPS sensor event",
            "example" : "Event triggered when the GPS position is updated"
          }
        }
      },
      "SensorMagneticEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Magnetic sensor event (e.g., \"magnetic_sensor_triggered\")",
            "example" : "magnetic_sensor_triggered"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the magnetic sensor event",
            "example" : "Event triggered when the magnetic sensor is triggered"
          }
        }
      },
      "SensorDlightEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "DLight sensor event (e.g., \"dlight_sensor_value_changed\")",
            "example" : "dlight_sensor_value_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the DLight sensor event",
            "example" : "Event triggered when the DLight sensor value changes"
          }
        }
      },
      "SensorPhotoResistanceEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Photoresistance sensor event (e.g., \"photoresistance_sensor_value_changed\")",
            "example" : "photoresistance_sensor_value_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the photoresistance sensor event",
            "example" : "Event triggered when the photoresistance sensor value changes"
          }
        }
      },
      "SensorRelay1ChannelEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Relay sensor event (e.g., \"relay_state_changed\")",
            "example" : "relay_state_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the relay sensor event",
            "example" : "Event triggered when the relay state changes"
          }
        }
      },
      "SensorRelay2ChannelEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Relay 2-Channel sensor event (e.g., \"relay_2channel_state_changed\")",
            "example" : "relay_2channel_state_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the relay 2-channel sensor event",
            "example" : "Event triggered when the relay 2-channel state changes"
          }
        }
      },
      "SensorMicrophoneLm393EventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Microphone LM393 sensor event (e.g., \"microphone_signal_detected\")",
            "example" : "microphone_signal_detected"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the microphone LM393 sensor event",
            "example" : "Event triggered when a signal is detected by the microphone LM393 sensor"
          }
        }
      },
      "SensorPassiveBuzzerEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Passive Buzzer sensor event (e.g., \"passive_buzzer_signal_detected\")",
            "example" : "passive_buzzer_signal_detected"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the passive buzzer sensor event",
            "example" : "Event triggered when a signal is detected by the passive buzzer sensor"
          }
        }
      },
      "SensorCryptoAuthenticationEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Crypto Authentication sensor event (e.g., \"crypto_authentication_success\")",
            "example" : "crypto_authentication_success"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the crypto authentication sensor event",
            "example" : "Event triggered when a crypto authentication succeeds"
          }
        }
      },
      "SensorVoltmeterADS1115EventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Voltmeter ADS1115 sensor event (e.g., \"voltage_level_changed\")",
            "example" : "voltage_level_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the voltmeter ADS1115 sensor event",
            "example" : "Event triggered when the voltage level changes"
          }
        }
      },
      "SensorAmmeterADS1115EventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Ammeter ADS1115 sensor event (e.g., \"current_level_changed\")",
            "example" : "current_level_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the ammeter ADS1115 sensor event",
            "example" : "Event triggered when the current level changes"
          }
        }
      },
      "SensorIsolatedRs485EventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Isolated RS485 sensor event (e.g., \"rs485_signal_changed\")",
            "example" : "rs485_signal_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the isolated RS485 sensor event",
            "example" : "Event triggered when the RS485 signal changes"
          }
        }
      },
      "SensorCanBusEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "CANBus sensor event (e.g., \"canbus_signal_changed\")",
            "example" : "canbus_signal_changed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the CANBus sensor event",
            "example" : "Event triggered when the CANBus signal changes"
          }
        }
      },
      "SensorDualButtonEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Dual Button sensor event (e.g., \"dual_button_pressed\")",
            "example" : "dual_button_pressed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the dual button sensor event",
            "example" : "Event triggered when the dual button is pressed"
          }
        }
      },
      "SensorMiniButtonEventInfo" : {
        "type" : "object",
        "properties" : {
          "event" : {
            "type" : "string",
            "description" : "Mini Button sensor event (e.g., \"mini_button_pressed\")",
            "example" : "mini_button_pressed"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the mini button sensor event",
            "example" : "Event triggered when the mini button is pressed"
          }
        }
      },
      "WiFiConfigurationData" : {
        "required" : [ "band", "mode", "password", "ssid" ],
        "type" : "object",
        "properties" : {
          "ssid" : {
            "maxLength" : 64,
            "minLength" : 4,
            "type" : "string",
            "description" : "WiFi network name",
            "example" : "MyWiFi"
          },
          "password" : {
            "maxLength" : 64,
            "minLength" : 8,
            "type" : "string",
            "description" : "WiFi network password",
            "example" : "StrongPassword123"
          },
          "mode" : {
            "type" : "string",
            "description" : "WiFi mode (AP, STATION, AP_STATION)",
            "example" : "AP",
            "enum" : [ "ACCESSPOINT", "STATION", "ACCESSPOINT_STATION" ]
          },
          "band" : {
            "type" : "string",
            "description" : "WiFi band (2.4GHz or 5GHz)",
            "example" : "2.4GHz",
            "enum" : [ "2.4GHz", "5GHz" ]
          }
        }
      },
      "WiFiConfigurationResponse" : {
        "required" : [ "band", "data", "mode", "ssid" ],
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/WiFiConfigurationResponse_data"
          }
        }
      },
      "BaseSensorData" : {
        "required" : [ "id", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Sensor ID",
            "example" : "sensorxyz-123"
          },
          "state" : {
            "type" : "integer",
            "description" : "Estado del sensor 0=INACTIVE, 1=ACTIVE",
            "example" : 1,
            "enum" : [ 0, 1 ]
          }
        }
      },
      "BaseModuleData" : {
        "required" : [ "id", "state" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Module ID",
            "example" : "modulexyz-123"
          },
          "state" : {
            "type" : "integer",
            "description" : "Estado del module 0=INACTIVE, 1=ACTIVE",
            "example" : 1,
            "enum" : [ 0, 1 ]
          }
        }
      },
      "ModuleScd40Data" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModuleData"
        }, {
          "required" : [ "co2_accuracy", "co2_ppm", "humidity", "humidity_range", "temperature", "temperature_range", "temperature_range_unit" ],
          "type" : "object",
          "properties" : {
            "co2_accuracy" : {
              "type" : "string",
              "description" : "Accuracy of CO2 measurement",
              "example" : "±(50 ppm + 5% of reading, Example: 400 ppm ±70 ppm)"
            },
            "co2_ppm" : {
              "maximum" : 2000,
              "minimum" : 400,
              "type" : "number",
              "description" : "CO2 concentration in parts per million",
              "example" : 400
            },
            "temperature_range" : {
              "type" : "string",
              "description" : "Minimum and Maximum temperature range in degrees Celsius",
              "example" : "-10 to 60 °C"
            },
            "temperature" : {
              "maximum" : 60,
              "minimum" : -10,
              "type" : "number",
              "description" : "Temperature in degrees Celsius",
              "example" : 22.5
            },
            "temperature_range_unit" : {
              "type" : "string",
              "description" : "Unit of temperature range",
              "example" : "Celsius",
              "enum" : [ "Celsius", "Farenheit" ]
            },
            "humidity_range" : {
              "type" : "string",
              "description" : "Operating humidity range in percentage of Relative Humidity (RH)",
              "example" : "0 - 95 %RH"
            },
            "humidity" : {
              "maximum" : 95,
              "minimum" : 0,
              "type" : "number",
              "description" : "Relative humidity in percentage",
              "example" : 55
            }
          },
          "description" : "The SCD40 Module allows you to obtain values of temperature, humidity and air quality (CO2)"
        } ]
      },
      "ModuleLoraWanData" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModuleData"
        }, {
          "required" : [ "data_rate", "frequency", "payload", "signal_strength" ],
          "type" : "object",
          "properties" : {
            "frequency" : {
              "type" : "string",
              "description" : "Operating frequency",
              "example" : "433MHz",
              "enum" : [ "433MHz", "915MHz" ]
            },
            "signal_strength" : {
              "maximum" : 300,
              "minimum" : -300,
              "type" : "number",
              "description" : "Signal strength in dBm",
              "example" : -70
            },
            "data_rate" : {
              "type" : "string",
              "description" : "Data rate",
              "example" : "SF12/BW125KHz"
            },
            "payload" : {
              "type" : "string",
              "description" : "Payload data received",
              "example" : "Hello, World!"
            }
          },
          "description" : "This module, under the specification for low-power, wide-area networks, allows you to manage a LoraWan network."
        } ]
      },
      "ModuleZigbeeData" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModuleData"
        }, {
          "required" : [ "data", "node_id", "signal_strength" ],
          "type" : "object",
          "properties" : {
            "node_id" : {
              "type" : "string",
              "description" : "ID of the Zigbee node",
              "example" : "zigbee-001"
            },
            "signal_strength" : {
              "type" : "number",
              "description" : "Signal strength in dBm",
              "example" : -80
            },
            "data" : {
              "type" : "string",
              "description" : "Data received from the Zigbee node",
              "example" : "Temperature: 25°C"
            }
          },
          "description" : "This module specifies a set of high-level wireless communication protocols for use with low-power digital broadcasting. (PAN, Personal Area Network))"
        } ]
      },
      "ModuleNbiotData" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseModuleData"
        }, {
          "required" : [ "band", "payload", "signal_strength" ],
          "type" : "object",
          "properties" : {
            "band" : {
              "type" : "string",
              "description" : "Operating frequency band",
              "example" : "B20"
            },
            "signal_strength" : {
              "type" : "number",
              "description" : "Signal strength in dBm",
              "example" : -90
            },
            "payload" : {
              "type" : "string",
              "description" : "Payload data received",
              "example" : "Telemetry data"
            }
          },
          "description" : "This module allows you to manage an Internet of Things Network using low power wide area (LPWA) technology compatible with the 4G LTE platform."
        } ]
      },
      "SensorPirData" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BaseSensorData"
        }, {
          "required" : [ "detection_distance", "latency_time", "motion_detected", "operating_temperature", "quiescent_current", "sensing_range" ],
          "type" : "object",
          "properties" : {
            "motion_detected" : {
              "type" : "boolean",
              "description" : "Indicates if motion has been detected",
              "example" : true
            },
            "detection_distance" : {
              "$ref" : "#/components/schemas/SensorPirData_detection_distance"
            },
            "sensing_range" : {
              "maximum" : 100,
              "minimum" : 0,
              "type" : "number",
              "description" : "Detection range in degrees",
              "example" : 100
            },
            "latency_time" : {
              "maximum" : 3600,
              "minimum" : 2,
              "type" : "number",
              "description" : "Latency time in seconds",
              "example" : 2
            },
            "quiescent_current" : {
              "maximum" : 60,
              "minimum" : 0,
              "type" : "number",
              "description" : "Quiescent current in microamperes",
              "example" : 60
            },
            "operating_temperature" : {
              "pattern" : "^-?\\d{1,3}\\s*-\\s*-?\\d{1,3}\\s*°C$",
              "type" : "string",
              "description" : "Operating temperature range",
              "example" : "-20 - 80 °C"
            }
          }
        } ]
      },
      "SensorUhfRfidData" : {
        "required" : [ "air_interface_protocol", "communication_protocol", "crc", "detection_distance", "epc", "hardware_version", "manufacturer", "output_power_range", "pc", "rssi", "software_version", "tag_cache_area", "working_spectrum_range" ],
        "type" : "object",
        "properties" : {
          "detection_distance" : {
            "$ref" : "#/components/schemas/SensorUhfRfidData_detection_distance"
          },
          "working_spectrum_range" : {
            "pattern" : "^\\d{3}-\\d{3}MHz$",
            "type" : "string",
            "description" : "Working spectrum range in MHz",
            "example" : "840-960MHz"
          },
          "air_interface_protocol" : {
            "type" : "string",
            "description" : "Air interface protocol",
            "example" : "EPCglobal UHF Class 1 Gen 2 / ISO 18000-6C"
          },
          "tag_cache_area" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "Tag cache area in number of tags",
            "example" : 200
          },
          "communication_protocol" : {
            "type" : "string",
            "description" : "Communication protocol",
            "example" : "UART (Baud rate: 115200bps)"
          },
          "output_power_range" : {
            "pattern" : "^\\d{1,2}-\\d{1,2}\\sdBm$",
            "type" : "string",
            "description" : "Output power range in dBm",
            "example" : "18-26 dBm"
          },
          "hardware_version" : {
            "type" : "string",
            "description" : "Hardware version",
            "example" : "V1.00"
          },
          "software_version" : {
            "type" : "string",
            "description" : "Software version",
            "example" : "V1.00"
          },
          "manufacturer" : {
            "type" : "string",
            "description" : "Manufacturer name",
            "example" : "ManufacturerName"
          },
          "epc" : {
            "type" : "string",
            "description" : "EPC code read",
            "example" : "30 75 1F EB 70 5C 59 04"
          },
          "rssi" : {
            "type" : "number",
            "description" : "RSSI signal strength in dBm",
            "example" : -70
          },
          "pc" : {
            "type" : "string",
            "description" : "PC protocol code",
            "example" : "3000"
          },
          "crc" : {
            "type" : "string",
            "description" : "CRC code",
            "example" : "1234"
          }
        }
      },
      "SensorGpsLiteData" : {
        "required" : [ "EW", "NS", "date", "fix", "latitude", "longitude", "satellites", "status", "time" ],
        "type" : "object",
        "properties" : {
          "time" : {
            "pattern" : "^\\d{6}\\.\\d{2}$",
            "type" : "string",
            "description" : "UTC time in the format hhmmss.ss",
            "example" : "083559.00"
          },
          "status" : {
            "type" : "string",
            "description" : "GPS status (A = Data valid, V = Data invalid)",
            "example" : "A",
            "enum" : [ "A", "V" ]
          },
          "latitude" : {
            "pattern" : "^\\d{4}\\.\\d{5}$",
            "type" : "string",
            "description" : "Latitude in degrees and minutes",
            "example" : "4717.11437"
          },
          "NS" : {
            "type" : "string",
            "description" : "North/South indicator",
            "example" : "N",
            "enum" : [ "N", "S" ]
          },
          "longitude" : {
            "pattern" : "^\\d{5}\\.\\d{5}$",
            "type" : "string",
            "description" : "Longitude in degrees and minutes",
            "example" : "00833.91522"
          },
          "EW" : {
            "type" : "string",
            "description" : "East/West indicator",
            "example" : "E",
            "enum" : [ "E", "W" ]
          },
          "speed" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "Speed over ground in knots",
            "example" : 0.004
          },
          "course" : {
            "maximum" : 360,
            "minimum" : 0,
            "type" : "number",
            "description" : "Course over ground in degrees",
            "example" : 77.52
          },
          "date" : {
            "pattern" : "^\\d{6}$",
            "type" : "string",
            "description" : "Date in the format ddmmyy",
            "example" : "091202"
          },
          "mv" : {
            "maximum" : 180,
            "minimum" : -180,
            "type" : "number",
            "description" : "Magnetic variation in degrees",
            "example" : 0.0
          },
          "mvEW" : {
            "type" : "string",
            "description" : "Magnetic variation E/W indicator",
            "example" : "W",
            "enum" : [ "E", "W" ]
          },
          "posMode" : {
            "type" : "string",
            "description" : "Mode indicator",
            "example" : "A",
            "enum" : [ "A", "D", "E" ]
          },
          "navStatus" : {
            "type" : "string",
            "description" : "Navigational status indicator",
            "example" : "V",
            "enum" : [ "V" ]
          },
          "altitude" : {
            "maximum" : 40000,
            "minimum" : -5000,
            "type" : "number",
            "description" : "Altitude in meters",
            "example" : 35.5
          },
          "satellites" : {
            "maximum" : 12,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Number of visible satellites",
            "example" : 4
          },
          "hdop" : {
            "maximum" : 50,
            "minimum" : 0,
            "type" : "number",
            "description" : "Horizontal dilution of precision",
            "example" : 1.2
          },
          "fix" : {
            "type" : "boolean",
            "description" : "Indicates if the GPS has a fix",
            "example" : true
          }
        }
      },
      "SensorMagneticData" : {
        "required" : [ "configuration", "state" ],
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "boolean",
            "description" : "Sensor state (ON=True or OFF=False)",
            "example" : true
          },
          "configuration" : {
            "type" : "boolean",
            "description" : "Sensor configuration (NO=True o NC=False)",
            "example" : true
          }
        }
      },
      "SensorDlightData" : {
        "required" : [ "illuminance" ],
        "type" : "object",
        "properties" : {
          "illuminance" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "Illuminance level in lux",
            "example" : 500
          }
        }
      },
      "SensorPhotoResistanceData" : {
        "required" : [ "light_intensity" ],
        "type" : "object",
        "properties" : {
          "light_intensity" : {
            "minimum" : 0,
            "type" : "number",
            "description" : "Light intensity in arbitrary units",
            "example" : 300
          }
        }
      },
      "SensorRelay1ChannelData" : {
        "required" : [ "state" ],
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "boolean",
            "description" : "Relay state (ON=True or OFF=False)",
            "example" : true
          }
        }
      },
      "SensorRelay2ChannelData" : {
        "required" : [ "channel1_state", "channel2_state" ],
        "type" : "object",
        "properties" : {
          "channel1_state" : {
            "type" : "boolean",
            "description" : "Estado del canal 1 (ON=True o OFF=False)",
            "example" : true
          },
          "channel2_state" : {
            "type" : "boolean",
            "description" : "Estado del canal 2 (ON=True o OFF=False)",
            "example" : false
          }
        }
      },
      "SensorMicrophoneLm393Data" : {
        "required" : [ "analog_signal", "comparator_threshold", "digital_signal" ],
        "type" : "object",
        "properties" : {
          "analog_signal" : {
            "type" : "number",
            "description" : "Señal analógica del micrófono",
            "example" : 0.5
          },
          "digital_signal" : {
            "type" : "boolean",
            "description" : "Señal digital del micrófono",
            "example" : true
          },
          "comparator_threshold" : {
            "type" : "number",
            "description" : "Umbral de comparación ajustado por resistencia variable",
            "example" : 0.8
          }
        }
      },
      "SensorPassiveBuzzerData" : {
        "required" : [ "sound_level" ],
        "type" : "object",
        "properties" : {
          "sound_level" : {
            "type" : "number",
            "description" : "Nivel de sonido en dB",
            "example" : 72
          }
        }
      },
      "SensorCryptoAuthenticationData" : {
        "required" : [ "certificate", "key_storage_count", "unique_serial_number" ],
        "type" : "object",
        "properties" : {
          "unique_serial_number" : {
            "type" : "string",
            "description" : "Número de serie único de 72 bits",
            "example" : "123456789ABCDEF0"
          },
          "key_storage_count" : {
            "type" : "integer",
            "description" : "Número de llaves almacenadas",
            "example" : 16
          },
          "certificate" : {
            "type" : "string",
            "description" : "Certificado preconstruido para autenticación",
            "example" : "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA..."
          }
        }
      },
      "SensorVoltmeterAds1115Data" : {
        "required" : [ "voltage" ],
        "type" : "object",
        "properties" : {
          "voltage" : {
            "type" : "number",
            "description" : "Voltaje medido en voltios",
            "example" : 12.5
          }
        }
      },
      "SensorAmmeterAds1115Data" : {
        "required" : [ "current" ],
        "type" : "object",
        "properties" : {
          "current" : {
            "type" : "number",
            "description" : "Corriente medida en amperios",
            "example" : 2.5
          }
        }
      },
      "SensorIsolatedRs485Data" : {
        "required" : [ "signal_rate" ],
        "type" : "object",
        "properties" : {
          "signal_rate" : {
            "type" : "number",
            "description" : "Tasa de transmisión de señal en Kbps",
            "example" : 500
          }
        }
      },
      "SensorCanBusData" : {
        "required" : [ "signal_rate" ],
        "type" : "object",
        "properties" : {
          "signal_rate" : {
            "type" : "number",
            "description" : "Tasa de transmisión de señal en Mbps",
            "example" : 1
          }
        }
      },
      "SensorDualButtonData" : {
        "required" : [ "button1_state", "button2_state" ],
        "type" : "object",
        "properties" : {
          "button1_state" : {
            "type" : "boolean",
            "description" : "Estado del botón 1",
            "example" : false
          },
          "button2_state" : {
            "type" : "boolean",
            "description" : "Estado del botón 2",
            "example" : true
          }
        }
      },
      "SensorMiniButtonData" : {
        "required" : [ "button_state" ],
        "type" : "object",
        "properties" : {
          "button_state" : {
            "type" : "boolean",
            "description" : "Estado del botón",
            "example" : true
          }
        }
      },
      "UserData" : {
        "required" : [ "created_at", "email", "full_name", "id", "updated_at", "username" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "User ID",
            "example" : "123456"
          },
          "username" : {
            "minLength" : 6,
            "type" : "string",
            "description" : "Username",
            "example" : "john_doe"
          },
          "email" : {
            "type" : "string",
            "description" : "Email address",
            "format" : "email",
            "example" : "john_doe@example.com"
          },
          "full_name" : {
            "type" : "string",
            "description" : "Full name of the user",
            "example" : "John Doe"
          },
          "created_at" : {
            "type" : "string",
            "description" : "Account creation date",
            "format" : "date-time",
            "example" : "2023-01-01T12:00:00Z"
          },
          "updated_at" : {
            "type" : "string",
            "description" : "Account update date",
            "format" : "date-time",
            "example" : "2023-01-10T12:00:00Z"
          }
        }
      },
      "ErrorResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ErrorDetail"
        }, {
          "type" : "object",
          "properties" : {
            "error" : {
              "$ref" : "#/components/schemas/ErrorResponse_error"
            }
          }
        } ]
      },
      "ErrorDetail" : {
        "type" : "object",
        "properties" : {
          "@type" : {
            "type" : "string",
            "description" : "Type of the error",
            "example" : "mecabotic.com/type/mecabotic.rpc.BadRequest"
          },
          "fieldViolations" : {
            "type" : "array",
            "description" : "List of field violations",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail_fieldViolations"
            }
          }
        }
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_data"
          }
        }
      },
      "inline_response_200_1" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_1_data"
          }
        }
      },
      "inline_response_200_2" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_2_data"
          }
        }
      },
      "inline_response_200_3" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_3_data"
          }
        }
      },
      "inline_response_200_4" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "type" : "array",
            "description" : "List of available module types",
            "items" : {
              "$ref" : "#/components/schemas/ModuleInfo"
            }
          }
        }
      },
      "inline_response_200_5" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_5_data"
          }
        }
      },
      "inline_response_200_6" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "type" : "array",
            "description" : "List of available sensor types",
            "items" : {
              "$ref" : "#/components/schemas/ModuleInfo"
            }
          }
        }
      },
      "inline_response_200_7" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_7_data"
          }
        }
      },
      "sensor_id_state_body" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string",
            "description" : "State of the relay (ON/OFF)",
            "example" : "ON",
            "enum" : [ "ON", "OFF" ]
          }
        }
      },
      "inline_response_200_8" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_8_data"
          }
        }
      },
      "inline_response_200_9" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_9_data"
          }
        }
      },
      "inline_response_200_10" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_10_data"
          }
        }
      },
      "inline_response_200_11" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "type" : "array",
            "description" : "List of available events",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/EventInfo"
              }, {
                "$ref" : "#/components/schemas/WiFiEventInfo"
              }, {
                "$ref" : "#/components/schemas/BatteryEventInfo"
              }, {
                "$ref" : "#/components/schemas/TelemetryEventInfo"
              }, {
                "$ref" : "#/components/schemas/ModuleLoraWanEventInfo"
              }, {
                "$ref" : "#/components/schemas/ModuleZigbeeEventInfo"
              }, {
                "$ref" : "#/components/schemas/ModuleNbIotEventInfo"
              }, {
                "$ref" : "#/components/schemas/ModuleScd40EventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorPirEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorUhfRfidEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorGpsLiteEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorMagneticEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorDlightEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorPhotoResistanceEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorRelay1ChannelEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorRelay2ChannelEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorMicrophoneLm393EventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorPassiveBuzzerEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorCryptoAuthenticationEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorVoltmeterADS1115EventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorAmmeterADS1115EventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorIsolatedRs485EventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorCanBusEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorDualButtonEventInfo"
              }, {
                "$ref" : "#/components/schemas/SensorMiniButtonEventInfo"
              } ]
            }
          }
        }
      },
      "inline_response_200_12" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Event notification received successfully"
          }
        }
      },
      "inline_response_200_13" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EventSubscription"
            }
          }
        }
      },
      "inline_response_201" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_201_data"
          }
        }
      },
      "devices_display_body" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "The message to be displayed",
            "example" : "Hello, World!"
          },
          "image_url" : {
            "type" : "string",
            "description" : "URL of the image to be displayed",
            "format" : "uri",
            "example" : "https://example.com/image.png"
          }
        }
      },
      "inline_response_200_14" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_14_data"
          }
        }
      },
      "devices_powerbutton_body" : {
        "type" : "object",
        "properties" : {
          "state" : {
            "type" : "string",
            "description" : "State of the power button (ON/OFF)",
            "example" : "ON",
            "enum" : [ "ON", "OFF" ]
          }
        }
      },
      "inline_response_200_15" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_15_data"
          }
        }
      },
      "devices_button1_body" : {
        "type" : "object",
        "properties" : {
          "action" : {
            "maxLength" : 32,
            "minLength" : 1,
            "type" : "string",
            "description" : "Action to be performed when Button 1 is pressed",
            "example" : "START"
          }
        }
      },
      "inline_response_200_16" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_16_data"
          }
        }
      },
      "devices_button2_body" : {
        "type" : "object",
        "properties" : {
          "action" : {
            "maxLength" : 32,
            "minLength" : 1,
            "type" : "string",
            "description" : "Action to be performed when Button 2 is pressed",
            "example" : "STOP"
          }
        }
      },
      "inline_response_200_17" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_17_data"
          }
        }
      },
      "devices_button3_body" : {
        "type" : "object",
        "properties" : {
          "action" : {
            "maxLength" : 32,
            "minLength" : 1,
            "type" : "string",
            "description" : "Action to be performed when Button 3 is pressed",
            "example" : "RESET"
          }
        }
      },
      "inline_response_200_18" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_18_data"
          }
        }
      },
      "auth_login_body" : {
        "required" : [ "password", "username" ],
        "type" : "object",
        "properties" : {
          "username" : {
            "minLength" : 3,
            "type" : "string",
            "description" : "The user's username",
            "example" : "john_doe"
          },
          "password" : {
            "minLength" : 8,
            "type" : "string",
            "description" : "The user's password",
            "example" : "SecurePassword123!"
          }
        }
      },
      "inline_response_200_19" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_200_19_data"
          }
        }
      },
      "auth_register_body" : {
        "required" : [ "email", "full_name", "password", "username" ],
        "type" : "object",
        "properties" : {
          "username" : {
            "minLength" : 6,
            "type" : "string",
            "description" : "The user's username",
            "example" : "john_doe"
          },
          "password" : {
            "minLength" : 8,
            "type" : "string",
            "description" : "The user's password",
            "example" : "SecurePassword123!"
          },
          "email" : {
            "type" : "string",
            "description" : "The user's email address",
            "format" : "email",
            "example" : "john_doe@example.com"
          },
          "full_name" : {
            "type" : "string",
            "description" : "The user's full name",
            "example" : "John Doe"
          }
        }
      },
      "inline_response_201_1" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/inline_response_201_1_data"
          }
        }
      },
      "inline_response_200_20" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "type" : "object",
            "nullable" : true
          },
          "data" : {
            "$ref" : "#/components/schemas/UserData"
          }
        }
      },
      "auth_me_body" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "minLength" : 3,
            "type" : "string",
            "description" : "The user's username",
            "example" : "john_doe"
          },
          "email" : {
            "type" : "string",
            "description" : "The user's email address",
            "format" : "email",
            "example" : "john_doe@example.com"
          },
          "full_name" : {
            "type" : "string",
            "description" : "The user's full name",
            "example" : "John Doe"
          }
        }
      },
      "oauth_authorize_body" : {
        "type" : "object",
        "properties" : {
          "confirm" : {
            "type" : "string",
            "example" : "true"
          }
        }
      },
      "oauth_token_body" : {
        "type" : "object",
        "properties" : {
          "grant_type" : {
            "type" : "string",
            "example" : "authorization_code"
          },
          "client_id" : {
            "type" : "string",
            "example" : "client-id"
          },
          "client_secret" : {
            "type" : "string",
            "example" : "client-secret"
          },
          "redirect_uri" : {
            "type" : "string",
            "example" : "https://client-app.com/callback"
          },
          "code" : {
            "type" : "string",
            "example" : "authorization-code"
          },
          "refresh_token" : {
            "type" : "string",
            "example" : "refresh-token"
          }
        }
      },
      "inline_response_200_21" : {
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string",
            "example" : "JWT access token"
          },
          "token_type" : {
            "type" : "string",
            "example" : "Bearer"
          },
          "expires_in" : {
            "type" : "integer",
            "example" : 3600
          },
          "refresh_token" : {
            "type" : "string",
            "example" : "refresh-token"
          }
        }
      },
      "inline_response_200_22" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "This endpoint is deprecated and will be removed in the next version. Use the new endpoint `/new-endpoint`."
          }
        }
      },
      "EventInfo_description" : {
        "type" : "object",
        "properties" : {
          "es" : {
            "type" : "string",
            "description" : "Description in Spanish",
            "example" : "Evento disparado cuando los datos del sensor se actualizan."
          },
          "en" : {
            "type" : "string",
            "description" : "Description in English",
            "example" : "Event triggered when sensor data is updated."
          }
        },
        "description" : "Description of the event in multiple languages"
      },
      "ModuleInfo_description" : {
        "type" : "object",
        "properties" : {
          "es" : {
            "type" : "string",
            "description" : "Description in Spanish",
            "example" : "Este modulo se encarga de la gestión de LoraWan"
          },
          "en" : {
            "type" : "string",
            "description" : "Description in English",
            "example" : "This module is responsible for LoraWan management"
          }
        },
        "description" : "Description of the module in multiple languages"
      },
      "WiFiConfigurationResponse_data" : {
        "type" : "object",
        "properties" : {
          "ssid" : {
            "type" : "string",
            "description" : "WiFi network name",
            "example" : "MyWiFi"
          },
          "mode" : {
            "type" : "string",
            "description" : "WiFi mode (AP, STATION, AP_STATION)",
            "example" : "ACCESSPOINT",
            "enum" : [ "ACCESSPOINT", "STATION", "ACCESSPOINT_STATION" ]
          },
          "band" : {
            "type" : "string",
            "description" : "WiFi band (2.4GHz or 5GHz)",
            "example" : "2.4GHz",
            "enum" : [ "2.4GHz", "5GHz" ]
          }
        }
      },
      "SensorPirData_detection_distance" : {
        "required" : [ "unit", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "maximum" : 500,
            "minimum" : 1,
            "type" : "number",
            "description" : "Detection distance in centimeters",
            "example" : 120
          },
          "unit" : {
            "type" : "string",
            "description" : "Unit of distance",
            "example" : "centimeters",
            "enum" : [ "millimeters", "centimeters", "meters", "kilometers" ]
          }
        }
      },
      "SensorUhfRfidData_detection_distance" : {
        "required" : [ "unit", "value" ],
        "type" : "object",
        "properties" : {
          "value" : {
            "maximum" : 10,
            "minimum" : 0.1,
            "type" : "number",
            "description" : "Detection distance in meters",
            "example" : 2
          },
          "unit" : {
            "type" : "string",
            "description" : "Unit of distance",
            "example" : "meters",
            "enum" : [ "millimeters", "centimeters", "meters", "kilometers" ]
          }
        }
      },
      "ErrorResponse_error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "description" : "Error code",
            "format" : "int32"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message"
          },
          "status" : {
            "type" : "string",
            "description" : "HTTP status code"
          },
          "details" : {
            "type" : "array",
            "description" : "List of error details",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          }
        },
        "description" : "Details of the error"
      },
      "ErrorDetail_fieldViolations" : {
        "type" : "object",
        "properties" : {
          "field" : {
            "type" : "string",
            "description" : "The field that caused the violation"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the violation"
          }
        }
      },
      "inline_response_200_data" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string",
            "description" : "Result of the configuration",
            "example" : "WIFI_CONFIGURATION_SUCCESSFUL"
          }
        }
      },
      "inline_response_200_1_data" : {
        "type" : "object",
        "properties" : {
          "total_consumption" : {
            "type" : "number",
            "description" : "Total consumption in watts",
            "example" : 50.5
          }
        }
      },
      "inline_response_200_2_data_channels" : {
        "type" : "object",
        "properties" : {
          "channel_id" : {
            "type" : "string",
            "description" : "Channel ID",
            "example" : "A1"
          },
          "consumption" : {
            "type" : "number",
            "description" : "Consumption of the channel in watts",
            "example" : 10.5
          }
        }
      },
      "inline_response_200_2_data" : {
        "type" : "object",
        "properties" : {
          "channels" : {
            "type" : "array",
            "description" : "List of channels and their consumption",
            "items" : {
              "$ref" : "#/components/schemas/inline_response_200_2_data_channels"
            }
          }
        }
      },
      "inline_response_200_3_data" : {
        "type" : "object",
        "properties" : {
          "level" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "number",
            "description" : "Battery charge percentage",
            "example" : 85
          },
          "charging" : {
            "type" : "boolean",
            "description" : "Charging status of the battery",
            "example" : true
          }
        }
      },
      "inline_response_200_5_data" : {
        "type" : "object",
        "properties" : {
          "module_id" : {
            "type" : "string",
            "description" : "Unique ID of the module",
            "example" : "mecathor-gps-1"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the module",
            "example" : "CONNECTED"
          },
          "data" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ModuleScd40Data"
            }, {
              "$ref" : "#/components/schemas/SensorUhfRfidData"
            } ]
          }
        }
      },
      "inline_response_200_7_data" : {
        "type" : "object",
        "properties" : {
          "sensor_id" : {
            "type" : "string",
            "description" : "Unique ID of the sensor",
            "example" : "mecathor-pir-1"
          },
          "status" : {
            "type" : "string",
            "description" : "Current status of the sensor",
            "example" : "ACTIVE"
          },
          "data" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/SensorPirData"
            }, {
              "$ref" : "#/components/schemas/SensorUhfRfidData"
            }, {
              "$ref" : "#/components/schemas/SensorGpsLiteData"
            }, {
              "$ref" : "#/components/schemas/SensorMagneticData"
            }, {
              "$ref" : "#/components/schemas/SensorDlightData"
            }, {
              "$ref" : "#/components/schemas/SensorPhotoResistanceData"
            }, {
              "$ref" : "#/components/schemas/SensorRelay1ChannelData"
            } ]
          }
        }
      },
      "inline_response_200_8_data" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "Result message",
            "example" : "RELAY_STATE_SUCCESSFULLY_CONFIGURED"
          }
        }
      },
      "inline_response_200_9_data" : {
        "type" : "object",
        "properties" : {
          "hardware_version" : {
            "type" : "string",
            "description" : "Hardware version",
            "example" : "V1.00"
          },
          "software_version" : {
            "type" : "string",
            "description" : "Software version",
            "example" : "V1.00"
          },
          "manufacturer" : {
            "type" : "string",
            "description" : "Manufacturer name",
            "example" : "ManufacturerName"
          }
        }
      },
      "inline_response_200_10_data" : {
        "type" : "object",
        "properties" : {
          "epc" : {
            "type" : "string",
            "description" : "EPC code read",
            "example" : "30 75 1F EB 70 5C 59 04"
          },
          "rssi" : {
            "type" : "number",
            "description" : "RSSI signal strength",
            "example" : -70
          },
          "pc" : {
            "type" : "string",
            "description" : "PC protocol code",
            "example" : "3000"
          },
          "crc" : {
            "type" : "string",
            "description" : "CRC code",
            "example" : "1234"
          }
        }
      },
      "inline_response_201_data" : {
        "type" : "object",
        "properties" : {
          "subscription_id" : {
            "type" : "string",
            "description" : "The ID of the created subscription",
            "example" : "sub-12345"
          }
        }
      },
      "inline_response_200_14_data" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string",
            "description" : "Result of the display operation",
            "example" : "DISPLAY_MESSAGE_SENT"
          }
        }
      },
      "inline_response_200_15_data" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string",
            "description" : "Result of the power button configuration",
            "example" : "POWER_BUTTON_CONFIGURED"
          }
        }
      },
      "inline_response_200_16_data" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string",
            "description" : "Result of the button 1 configuration",
            "example" : "BUTTON1_CONFIGURED"
          }
        }
      },
      "inline_response_200_17_data" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string",
            "description" : "Result of the button 2 configuration",
            "example" : "BUTTON2_CONFIGURED"
          }
        }
      },
      "inline_response_200_18_data" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string",
            "description" : "Result of the button 3 configuration",
            "example" : "BUTTON3_CONFIGURED"
          }
        }
      },
      "inline_response_200_19_data" : {
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string",
            "description" : "JWT access token",
            "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "inline_response_201_1_data" : {
        "type" : "object",
        "properties" : {
          "user" : {
            "$ref" : "#/components/schemas/UserData"
          }
        }
      }
    },
    "responses" : {
      "BadRequest" : {
        "description" : "The request is malformed or contains invalid parameters.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "invalidParameter" : {
                "summary" : "Invalid parameter",
                "value" : {
                  "error" : {
                    "code" : 400,
                    "message" : "Invalid parameter",
                    "status" : "Bad Request",
                    "details" : [ {
                      "field" : "username",
                      "description" : "Username must be at least 6 characters long"
                    } ]
                  }
                }
              },
              "missingField" : {
                "summary" : "Missing required field",
                "value" : {
                  "error" : {
                    "code" : 400,
                    "message" : "Missing required field",
                    "status" : "Bad Request",
                    "details" : [ {
                      "field" : "password",
                      "description" : "Password is required"
                    } ]
                  }
                }
              }
            }
          }
        }
      },
      "Unauthorized" : {
        "description" : "Authentication credentials are missing or incorrect.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "unauthorizedAccess" : {
                "summary" : "Example of an unauthorized response",
                "value" : {
                  "error" : {
                    "code" : 401,
                    "message" : "Unauthorized access",
                    "status" : "Unauthorized"
                  }
                }
              },
              "invalidToken" : {
                "summary" : "Invalid token",
                "value" : {
                  "error" : {
                    "code" : 401,
                    "message" : "Invalid token",
                    "status" : "Unauthorized"
                  }
                }
              }
            }
          }
        }
      },
      "Forbidden" : {
        "description" : "The client does not have sufficient permission for the requested operation.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "forbiddenOperation" : {
                "summary" : "Example of a forbidden response",
                "value" : {
                  "error" : {
                    "code" : 403,
                    "message" : "Forbidden operation",
                    "status" : "Forbidden"
                  }
                }
              },
              "accessDenied" : {
                "summary" : "Access denied",
                "value" : {
                  "error" : {
                    "code" : 403,
                    "message" : "Access denied",
                    "status" : "Forbidden"
                  }
                }
              }
            }
          }
        }
      },
      "NotFound" : {
        "description" : "The specified resource does not exist.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "resourceNotFound" : {
                "summary" : "Example of a not found response",
                "value" : {
                  "error" : {
                    "code" : 404,
                    "message" : "Resource not found",
                    "status" : "Not Found"
                  }
                }
              },
              "endpointNotFound" : {
                "summary" : "Endpoint not found",
                "value" : {
                  "error" : {
                    "code" : 404,
                    "message" : "Endpoint not found",
                    "status" : "Not Found"
                  }
                }
              }
            }
          }
        }
      },
      "InternalServerError" : {
        "description" : "An unexpected internal server error occurred.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "internalServerError" : {
                "summary" : "Example of an internal server error response",
                "value" : {
                  "error" : {
                    "code" : 500,
                    "message" : "Internal server error",
                    "status" : "Internal Server Error"
                  }
                }
              },
              "databaseError" : {
                "summary" : "Database error",
                "value" : {
                  "error" : {
                    "code" : 500,
                    "message" : "Database error",
                    "status" : "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "ServiceUnavailable" : {
        "description" : "The service is currently unavailable. Please try again later.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "serviceUnavailable" : {
                "summary" : "Example of a service unavailable response",
                "value" : {
                  "error" : {
                    "code" : 503,
                    "message" : "Service unavailable",
                    "status" : "Service Unavailable"
                  }
                }
              },
              "serviceMaintenanceMode" : {
                "summary" : "Maintenance mode",
                "value" : {
                  "error" : {
                    "code" : 503,
                    "message" : "Service in maintenance mode",
                    "status" : "Service Unavailable"
                  }
                }
              }
            }
          }
        }
      },
      "Conflict" : {
        "description" : "The request could not be completed due to a conflict with the current state of the target resource.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "conflictCurrentResourceState" : {
                "summary" : "Example of a conflict response",
                "value" : {
                  "error" : {
                    "code" : 409,
                    "message" : "Conflict with current resource state",
                    "status" : "Conflict"
                  }
                }
              },
              "resourceExists" : {
                "summary" : "Resource already exists",
                "value" : {
                  "error" : {
                    "code" : 409,
                    "message" : "Resource already exists",
                    "status" : "Conflict"
                  }
                }
              }
            }
          }
        }
      },
      "TooManyRequests" : {
        "description" : "The client has sent too many requests in a given amount of time (\"rate limiting\").",
        "headers" : {
          "X-RateLimit-Limit" : {
            "description" : "The maximum number of requests that the client is permitted to make per time window.",
            "style" : "simple",
            "explode" : false,
            "schema" : {
              "type" : "integer",
              "example" : 1000
            }
          },
          "X-RateLimit-Remaining" : {
            "description" : "The number of requests remaining in the current rate limit window.",
            "style" : "simple",
            "explode" : false,
            "schema" : {
              "type" : "integer",
              "example" : 0
            }
          },
          "X-RateLimit-Reset" : {
            "description" : "The number of seconds left until the rate limit is reset.",
            "style" : "simple",
            "explode" : false,
            "schema" : {
              "type" : "integer",
              "example" : 3600
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            },
            "examples" : {
              "rateLimitExceeded" : {
                "summary" : "Rate limit exceeded",
                "value" : {
                  "error" : {
                    "code" : 429,
                    "message" : "Too many requests",
                    "status" : "Too Many Requests"
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters" : {
      "ChannelIdParameter" : {
        "name" : "channel_id",
        "in" : "query",
        "description" : "IDs de canales específicos (A1, A2, B1, B2, C1, C2, USB1). Se pueden consultar múltiples canales separados por comas.",
        "required" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "example" : "A1,B2,USB1"
        }
      },
      "SensorTypeParameter" : {
        "name" : "sensor_type",
        "in" : "path",
        "description" : "Type of sensor (ej: 'sensor-pir', 'sensor-uhf-rfid', 'sensor-gps-lite', 'sensor-magnetic', 'sensor-dlight', 'sensor-photo-resistance', 'sensor-relay-1channel')",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "ModuleTypeParameter" : {
        "name" : "module_type",
        "in" : "path",
        "description" : "Type of Module (ej: 'module-nbiot', 'module-lorawan', 'module-scd40' )",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "headers" : {
      "X-RateLimit-Limit" : {
        "description" : "The maximum number of requests that the client is permitted to make per time window.",
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "integer",
          "example" : 1000
        }
      },
      "X-RateLimit-Remaining" : {
        "description" : "The number of requests remaining in the current rate limit window.",
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "integer",
          "example" : 750
        }
      },
      "X-RateLimit-Reset" : {
        "description" : "The number of seconds left until the rate limit is reset.",
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "integer",
          "example" : 3600
        }
      }
    },
    "securitySchemes" : {
      "BearerAuth" : {
        "type" : "http",
        "description" : "Use the Bearer token to authenticate your requests.\nTo obtain a token, login with your username and password.\n",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "description" : "Use the API Key to authenticate your requests. You can obtain an API Key by contacting the support team.\n",
        "name" : "X-API-KEY",
        "in" : "header"
      },
      "OAuth2" : {
        "type" : "oauth2",
        "description" : "OAuth 2.0 authentication. Use the access token to authenticate your requests.\n",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://mecabotic.com/oauth/authorize",
            "tokenUrl" : "https://mecabotic.com/oauth/token",
            "refreshUrl" : "https://mecabotic.com/oauth/refresh",
            "scopes" : {
              "read" : "Grants read access",
              "write" : "Grants write access",
              "admin" : "Grants access to admin operations"
            }
          }
        }
      }
    }
  },
  "x-ratelimit" : {
    "description" : "Rate limiting is enforced for all APIs to prevent abuse and ensure service stability.\n",
    "headers" : {
      "X-RateLimit-Limit" : {
        "description" : "The number of allowed requests in the current period",
        "schema" : {
          "type" : "integer"
        }
      },
      "X-RateLimit-Remaining" : {
        "description" : "The number of remaining requests in the current period",
        "schema" : {
          "type" : "integer"
        }
      },
      "X-RateLimit-Reset" : {
        "description" : "The number of seconds left until the current rate limit period resets",
        "schema" : {
          "type" : "integer"
        }
      }
    }
  }
}